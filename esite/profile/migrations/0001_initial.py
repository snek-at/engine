# Generated by Django 2.2.12 on 2020-08-05 11:12

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("images", "0002_auto_20200729_2232"),
        ("wagtailcore", "0045_assign_unlock_grouppagepermission"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProfilePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                (
                    "listing_title",
                    models.CharField(
                        blank=True,
                        help_text="Override the page title used when this page appears in listings",
                        max_length=255,
                    ),
                ),
                (
                    "listing_summary",
                    models.CharField(
                        blank=True,
                        help_text="The text summary used when this page appears in listings. It's also used as the description for search engines if the 'Search description' field above is not defined.",
                        max_length=255,
                    ),
                ),
                ("sources", models.TextField(null=True)),
                ("platform_data", models.TextField(blank=True, null=True)),
                ("verified", models.BooleanField(blank=True, default=False)),
                ("available_for_hire", models.BooleanField(blank=True, default=False)),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 36 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=36,
                        null=True,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("telephone", models.CharField(blank=True, max_length=40, null=True)),
                ("address", models.CharField(blank=True, max_length=60, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=12, null=True)),
                ("city", models.CharField(blank=True, max_length=60, null=True)),
                ("country", models.CharField(blank=True, max_length=2, null=True)),
                ("newsletter", models.BooleanField(blank=True, default=False)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                ("company", models.CharField(blank=True, max_length=80, null=True)),
                ("bids", models.TextField(blank=True, null=True)),
                ("tids", models.TextField(blank=True, null=True)),
                (
                    "main",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "top_language",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "theme",
                                            wagtail.core.blocks.CharBlock(
                                                blank=True,
                                                help_text="Bold header text",
                                                max_length=64,
                                                null=True,
                                            ),
                                        )
                                    ],
                                    blank=True,
                                    icon="fa-instagram",
                                    null=True,
                                ),
                            ),
                            (
                                "calendar",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "theme",
                                            wagtail.core.blocks.CharBlock(
                                                blank=True,
                                                help_text="Bold header text",
                                                max_length=64,
                                                null=True,
                                            ),
                                        )
                                    ],
                                    blank=True,
                                    icon="home",
                                    null=True,
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    "listing_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Choose the image you wish to be displayed when this page appears in listings",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.CustomImage",
                    ),
                ),
                (
                    "social_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.CustomImage",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("wagtailcore.page", models.Model),
        ),
    ]
