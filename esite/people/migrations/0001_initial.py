# Generated by Django 2.2 on 2020-10-27 21:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import esite.colorfield.blocks
import esite.people.models.person
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0052_pagelogentry'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('images', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_statistic', wagtail.core.fields.StreamField([('statistic_year', wagtail.core.blocks.StructBlock([('year', wagtail.core.blocks.ChoiceBlock(choices=esite.people.models.person.year_choices, required=False)), ('calendar3d', wagtail.images.blocks.ImageChooserBlock(required=False)), ('calendar_data', wagtail.core.blocks.TextBlock(required=False)), ('contribution_type_data', wagtail.core.blocks.TextBlock(required=False)), ('total_issue_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_commit_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repository_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_pull_request_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_pull_request_review_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_issues', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_commits', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_pull_requests', wagtail.core.blocks.IntegerBlock(required=False)), ('current_streak', wagtail.core.blocks.StructBlock([('start_date', wagtail.core.blocks.DateBlock(required=False)), ('end_date', wagtail.core.blocks.DateBlock(required=False)), ('total_days', wagtail.core.blocks.IntegerBlock(required=False)), ('total_contributions', wagtail.core.blocks.IntegerBlock(required=False))])), ('longest_streak', wagtail.core.blocks.StructBlock([('start_date', wagtail.core.blocks.DateBlock(required=False)), ('end_date', wagtail.core.blocks.DateBlock(required=False)), ('total_days', wagtail.core.blocks.IntegerBlock(required=False)), ('total_contributions', wagtail.core.blocks.IntegerBlock(required=False))])), ('busiest_day', wagtail.core.blocks.StructBlock([('date', wagtail.core.blocks.DateBlock(required=False)), ('total', wagtail.core.blocks.IntegerBlock(required=False))]))]))], blank=True, null=True)),
                ('years_statistic', wagtail.core.fields.StreamField([('statistic_year', wagtail.core.blocks.StructBlock([('year', wagtail.core.blocks.ChoiceBlock(choices=esite.people.models.person.year_choices, required=False)), ('calendar3d', wagtail.images.blocks.ImageChooserBlock(required=False)), ('calendar_data', wagtail.core.blocks.TextBlock(required=False)), ('contribution_type_data', wagtail.core.blocks.TextBlock(required=False)), ('total_issue_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_commit_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repository_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_pull_request_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_pull_request_review_contributions', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_issues', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_commits', wagtail.core.blocks.IntegerBlock(required=False)), ('total_repositories_with_contributed_pull_requests', wagtail.core.blocks.IntegerBlock(required=False)), ('current_streak', wagtail.core.blocks.StructBlock([('start_date', wagtail.core.blocks.DateBlock(required=False)), ('end_date', wagtail.core.blocks.DateBlock(required=False)), ('total_days', wagtail.core.blocks.IntegerBlock(required=False)), ('total_contributions', wagtail.core.blocks.IntegerBlock(required=False))])), ('longest_streak', wagtail.core.blocks.StructBlock([('start_date', wagtail.core.blocks.DateBlock(required=False)), ('end_date', wagtail.core.blocks.DateBlock(required=False)), ('total_days', wagtail.core.blocks.IntegerBlock(required=False)), ('total_contributions', wagtail.core.blocks.IntegerBlock(required=False))])), ('busiest_day', wagtail.core.blocks.StructBlock([('date', wagtail.core.blocks.DateBlock(required=False)), ('total', wagtail.core.blocks.IntegerBlock(required=False))]))]))], blank=True, null=True)),
                ('projects', wagtail.core.fields.StreamField([('project', wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('name', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('owner', wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('username', wagtail.core.blocks.CharBlock(max_length=255, required=False))])), ('members', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('username', wagtail.core.blocks.CharBlock(max_length=255, required=False))]))), ('languages', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('color', esite.colorfield.blocks.ColorBlock()), ('name', wagtail.core.blocks.CharBlock(max_length=255)), ('size', wagtail.core.blocks.IntegerBlock()), ('share', wagtail.core.blocks.FloatBlock())])))]))], blank=True, null=True)),
                ('organisations', wagtail.core.fields.StreamField([('organisation', wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('name', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('description', wagtail.core.blocks.TextBlock(required=False)), ('members', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('username', wagtail.core.blocks.CharBlock(max_length=255, required=False))]))), ('projects', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('name', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('owner', wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('username', wagtail.core.blocks.CharBlock(max_length=255, required=False))])), ('members', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('avatar_url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('url', wagtail.core.blocks.URLBlock(help_text='Important! Format https://www.domain.tld/xyz', required=False)), ('fullname', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('username', wagtail.core.blocks.CharBlock(max_length=255, required=False))]))), ('languages', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('color', esite.colorfield.blocks.ColorBlock()), ('name', wagtail.core.blocks.CharBlock(max_length=255)), ('size', wagtail.core.blocks.IntegerBlock()), ('share', wagtail.core.blocks.FloatBlock())])))])))]))], blank=True, null=True)),
                ('languages', wagtail.core.fields.StreamField([('language', wagtail.core.blocks.StructBlock([('color', esite.colorfield.blocks.ColorBlock()), ('name', wagtail.core.blocks.CharBlock(max_length=255)), ('size', wagtail.core.blocks.IntegerBlock()), ('share', wagtail.core.blocks.FloatBlock())]))], blank=True, null=True)),
                ('user', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='person', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('social_text', models.CharField(blank=True, max_length=255)),
                ('listing_title', models.CharField(blank=True, help_text='Override the page title used when this page appears in listings', max_length=255)),
                ('listing_summary', models.CharField(blank=True, help_text="The text summary used when this page appears in listings. It's also used as the description for search engines if the 'Search description' field above is not defined.", max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('status', models.TextField(blank=True)),
                ('bio', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('display_email', models.BooleanField(blank=True, default=False)),
                ('workplace', models.CharField(blank=True, max_length=255)),
                ('display_workplace', models.BooleanField(blank=True, default=False)),
                ('website_url', models.URLField(blank=True, max_length=255)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('display_ranking', models.BooleanField(blank=True, default=False)),
                ('display_programming_languages', models.BooleanField(blank=True, default=False)),
                ('display_2d_calendar', models.BooleanField(blank=True, default=False)),
                ('display_3d_calendar', models.BooleanField(blank=True, default=False)),
                ('display_contribution_types', models.BooleanField(blank=True, default=False)),
                ('display_week_activity', models.BooleanField(blank=True, default=False)),
                ('display_image_gallery', models.BooleanField(blank=True, default=False)),
                ('display_video_gallery', models.BooleanField(blank=True, default=False)),
                ('display_music_gallery', models.BooleanField(blank=True, default=False)),
                ('display_map', models.BooleanField(blank=True, default=False)),
                ('bids', models.TextField(blank=True, null=True)),
                ('tids', models.TextField(blank=True, null=True)),
                ('movable_pool', wagtail.core.fields.StreamField([('overview', wagtail.core.blocks.StructBlock([('order', wagtail.core.blocks.ListBlock(wagtail.core.blocks.IntegerBlock()))])), ('contribtype', wagtail.core.blocks.StructBlock([('order', wagtail.core.blocks.ListBlock(wagtail.core.blocks.IntegerBlock()))]))], blank=True, null=True)),
                ('avatar_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.SNEKImage')),
                ('follows', models.ManyToManyField(blank=True, null=True, related_name='followed_by', to='people.PersonPage')),
                ('likes', models.ManyToManyField(blank=True, null=True, related_name='liked_by', to='people.PersonPage')),
                ('listing_image', models.ForeignKey(blank=True, help_text='Choose the image you wish to be displayed when this page appears in listings', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.SNEKImage')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_page', to='people.Person')),
                ('social_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.SNEKImage')),
            ],
            options={
                'verbose_name': 'Person Page',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='SocialMediaProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('twitter', 'Twitter'), ('linkedin', 'LinkedIn')], max_length=200)),
                ('username', models.CharField(max_length=255)),
                ('person_page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_media_profile', to='people.PersonPage')),
            ],
        ),
        migrations.CreateModel(
            name='PersonIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('social_text', models.CharField(blank=True, max_length=255)),
                ('listing_title', models.CharField(blank=True, help_text='Override the page title used when this page appears in listings', max_length=255)),
                ('listing_summary', models.CharField(blank=True, help_text="The text summary used when this page appears in listings. It's also used as the description for search engines if the 'Search description' field above is not defined.", max_length=255)),
                ('listing_image', models.ForeignKey(blank=True, help_text='Choose the image you wish to be displayed when this page appears in listings', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.SNEKImage')),
                ('social_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.SNEKImage')),
            ],
            options={
                'verbose_name': 'Person Index',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Meta_Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=255)),
                ('link_type', models.CharField(choices=[('INSTAGRAM', 'Instagram Post'), ('SOUNDCLOUD', 'Soundcloud Song'), ('PHOTO', 'Photo URL'), ('YOUTUBE', 'Youtube URL'), ('VIMEO', 'VIMEO URL'), ('OTHER', 'Other')], default='OTHER', max_length=255)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('imgur_delete_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('person_page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_links', to='people.PersonPage')),
            ],
        ),
    ]
